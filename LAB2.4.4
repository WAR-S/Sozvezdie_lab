#define N
#include <iostream>
#include <ctime>
#include <cstdlib>
#include <clocale>
 //Объявляем прототипы
void swap(int & n1, int & n2);
int shuttle_sorting(int * A, int n);
void print_massive(int * A, int n);
int binarySearch(int * A, int key, int n);
int recursiveBinarySearch(int * A, int key, int first, int last);

int main() {
  setlocale(LC_ALL, "Russian");
  int first=0;
  int last=0;
  int key = 0; //Ключ поиска
  int n = 0;
  std::cout << "Введите размер массива: ";
  std::cin >> n;

  int A[n];
  std::srand(time(0));
  for (int i = 0; i < n; i++) {
    A[i] = rand() % 100;
  }
  std::cout << "Выводим сгенерированынй масиив: ";
  print_massive(A, n);

  std::cout << "Сортировка челноком: ";
  shuttle_sorting(A, n);

  std::cout << "Бинарный поиск:\n Введите ключ который нужно найти: ";
  std::cin >> key;
  if (binarySearch(A, key, n) == -1) {
    std::cout << "\nЭлемент не найден";
  } else {
    std::cout << "\nНомер элемента: " << binarySearch(A, key, n) + 1;
  }


  while (true)
  {
    std:cout<<endl;
    std::cout << "\nРекурсивный бинарный поиск:\n Введите ключ который нужно найти: ";
    std::cout<<"\tВведите -777 для выхода";
    std::cin >> key;
    if (key == -777)
           {
               break;
           }
    int searchResult = recursiveBinarySearch(A, key, 0, n - 1);
          if (searchResult < 0)
          {
            std::cout<<"Элемент со значением " <<key <<" не найден";
          }
          else
          {
          std::cout<<"Элемент найден. Индекс элемента со значением: "<<key<<" равен: "<< searchResult;
          }
  std:cout<<endl;
  }


  return 0;
}

void print_massive(int * A, int n) // принт массив
{
  for (int i = 0; i < n; i++) {
    std::cout << A[i] << ' ';
  }
  std::cout << "\n";
}

void swap(int & n1, int & n2) {
  int _t = n1;
  n1 = n2;
  n2 = _t;

}

int shuttle_sorting(int * A, int n) // Сортировка челноком
{
  for (int i = 0; i < n - 1; i++)
    if (A[i] > A[i + 1]) {
      swap(A[i], A[i + 1]);
      for (int k = i;
        (A[k] < A[k - 1]) && (k >= 1); k--)
        swap(A[k], A[k - 1]);
    }
  print_massive(A, n);
}

int binarySearch(int * A, int key, int n) { // обычный бинарный поиск
  int left = 0, right = n, mid;
  while (left <= right) {
    mid = left + (right - left) / 2;
    if (key < A[mid]) right = mid - 1;
    else if (key > A[mid]) left = mid + 1;
    else return mid;
  }
  return -1;
}

int recursiveBinarySearch(int * A, int key, int first, int last)
{
  if (first > last)
  {
    return -1; //элемент не найден
  }
  int middle = (first+last)/2;
  int middle_value=A[middle];
  if (middle_value==key)
  {
    return middle;
  }
  else
  {
    if (middle_value>key)
    {
      return recursiveBinarySearch(A,key,first,middle-1);
    }
    else
    {
      return recursiveBinarySearch(A,key,middle+1,last);
    }
  }


}

void Shell(int A[], int n) //сортировка Шелла
{
  int i, j, d, count;
  d = n;
  d = d / 2;
  while (d > 0) {
    for (i = 0; i < n - d; i++) {
      j = i;
      while (j >= 0 && A[j] > A[j + d]) {
        count = A[j];
        A[j] = A[j + d];
        A[j + d] = count;
        j--;
      }
    }
    d = d / 2;
  }
  print_massive(A,n);

}
