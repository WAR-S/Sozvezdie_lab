#define N 
#include <iostream>
 //Проектируем массив
void swap(int & n1, int & n2);
int shuttle_sorting(int * A, int n);
void print_massive(int * A, int n);
int binarySearch(int * A, int key, int n);

int main() {
  int key = 0; //Ключ поиска
  int n = 0;
  std::cout << "Введите размер массива: ";
  std::cin >> n;

  int A[n];
  for (int i = 0; i < n; i++) {
    A[i] = rand() % 100;
  }
  std::cout << "Выводим сгенерированынй масиив: ";
  print_massive(A, n);

  std::cout << "Сортировка челноком: ";
  shuttle_sorting(A, n);

  std::cout << "Бинарный поиск:\n Введите ключ который нужно найти: ";
  std::cin >> key;
  if (binarySearch(A, key, n) == -1) {
    std::cout << "\nЭлемент не найден";
  } else {
    std::cout << "\nНомер элемента: " << binarySearch(A, key, n) + 1;
  }

  return 0;
}

void print_massive(int * A, int n) // принт массив
{
  for (int i = 0; i < n; i++) {
    std::cout << A[i] << ' ';
  }
  std::cout << "\n";
}

void swap(int & n1, int & n2) {
  int _t = n1;
  n1 = n2;
  n2 = _t;

}

int shuttle_sorting(int * A, int n) // Сортировка челноком
{
  for (int i = 0; i < n - 1; i++)
    if (A[i] > A[i + 1]) {
      swap(A[i], A[i + 1]);
      for (int k = i;
        (A[k] < A[k - 1]) && (k >= 1); k--)
        swap(A[k], A[k - 1]);
    }
  print_massive(A, n);
}

int binarySearch(int * A, int key, int n) {
  int left = 0, right = n, mid;
  while (left <= right) {
    mid = left + (right - left) / 2;
    if (key < A[mid]) right = mid - 1;
    else if (key > A[mid]) left = mid + 1;
    else return mid;
  }
  return -1;
}
